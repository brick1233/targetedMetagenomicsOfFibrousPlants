"0",""
"0",""
"0","# keyword analysis"
"0","df <- dfSpec[,c(""ID"",""DE"")]"
"0",""
"0","# Step 1: Merge both keyword columns"
"0","df_keywords <- df %>%"
"0","  unite(""all_keywords"", ID, DE, sep = "";"") %>%           # Combine the two columns"
"0","  mutate(all_keywords = str_replace_all(all_keywords, ""^;+|;+$"", """"),       # Remove leading/trailing semicolons"
"0","         all_keywords = str_split(all_keywords, "";""))                  # Split into list of keywords"
"0",""
"0","# Step 2: Create co-occurrence pairs (if statement catches error caused by combn when there are less than 2 keywords)"
"0","keyword_pairs <- df_keywords %>%"
"0","  pull(all_keywords) %>%"
"0","  lapply(function(kw) {"
"0","    kw <- unique(trimws(kw))  # Clean and deduplicate"
"0","    if (length(kw) >= 2) {"
"0","      combn(kw, 2, simplify = FALSE)"
"0","    } else {"
"0","      NULL  # Skip rows with <2 keywords"
"0","    }"
"0","  }) %>%"
"0","  unlist(recursive = FALSE) %>%"
"0","  do.call(rbind, .) %>%"
"0","  as.data.frame(stringsAsFactors = FALSE)"
"0",""
"0","colnames(keyword_pairs) <- c(""from"", ""to"")"
"0",""
"0","# Step 3: Count pair co-occurrences"
"0","edges <- keyword_pairs %>%"
"0","  group_by(from, to) %>%"
"0","  summarise(weight = n(), .groups = ""drop"")"
"0",""
"0","# Step 4: Create graph and plot network"
"0","graph <- graph_from_data_frame(edges, directed = FALSE)"
"0",""
"0","ggraph(graph, layout = ""fr"") +"
"0","  geom_edge_link(aes(width = weight), edge_alpha = 0.5) +"
"0","  geom_node_point(size = 5, color = ""steelblue"") +"
"0","  geom_node_text(aes(label = name), repel = TRUE) +"
"0","  theme_void() +"
"0","  labs(title = ""Keyword Co-occurrence Network"")"
