api_key = NULL
### 2) construct and test query ###
## Construct the query
#specificQuery <- "((flax[tiab] OR hemp[tiab] OR kenaf[tiab] OR rett*[tiab]) AND (community[tiab] OR meta*bar*[tiab] OR meta*omic*[tiab] OR metaomic*[tiab] OR R16[tiab] OR R18[tiab] OR ITS[tiab]) AND microb*[tiab]) NOT (Rett syndrome[tiab] OR rumen[tiab] OR milk[tiab] OR bread[tiab] OR byssinosis[tiab] OR electrode[tiab] OR false flax[tiab] OR electrode[tiab])"
query <- "retting[tiab]"
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
### 3) download the collection of metadata ###
# it is good practice to specify the total number of documents from the query
specData <- pmApiRequest(query = query, limit = resSpec$total_count, api_key = api_key)
### 4) convert to readable/useable format ###
pubmedRetting <- convert2df(specData, dbsource = "pubmed", format = "api")
pubmedRetting$TI <- str_to_sentence(pubmedRetting$TI)
pubmedRetting$AU <- str_to_sentence(pubmedRetting$AU)
pubmedRetting$SO <- str_to_sentence(pubmedRetting$SO)
pubmedRetting$AB <- str_to_sentence(pubmedRetting$AB)
#save results
save(pubmedRetting, file="pubmed_rettingRes.Rda")
openAlex_queryRes <- oa_fetch(
entity = "works",
abstract.search = "retting",
is_retracted = FALSE,
type = c("journal-article", "article", "review"),
verbose = TRUE
)
save(openAlex_queryRes, file="openAlex_rettingRes.Rda")
load("openAlex_rettingRes.Rda")
load("pubmed_rettingRes.Rda")
#filter pubmed
pubmedRetting$DI <- paste0("https://doi.org/", pubmedRetting$DI)
#important authors sourced from https://doi.org/10.1007/s00253-024-13323-y page 6
importantPapers <- pubmedRetting[grepl("law|djemiel|grec|akin|fuller|norman|ribeiro|liu m|
orm|brown|sharma|henriksson|fila",
pubmedRetting$AU, ignore.case = TRUE), ]
extractedArticle <- pubmedRetting[pubmedRetting$TI %in% c("MICROBIOLOGY OF RETTING."),]
pubmedFiltered <- pubmedRetting[grepl("retting", pubmedRetting$AB, ignore.case = TRUE) |
grepl("retting", pubmedRetting$TI, ignore.case = TRUE), ]
pubmedFiltered <- pubmedFiltered[grepl("flax|hemp|kenaf|bast", pubmedFiltered$AB, ignore.case = TRUE) |
grepl("hemp|flax|kenaf|bast", pubmedFiltered$TI, ignore.case = TRUE), ]
ribosomalDNA <- pubmedFiltered[grepl("rDNA|16S|18S|fungus|fungi|fungal|metabar|meta-bar|metagen|meta-gen|microb", pubmedFiltered$AB, ignore.case = TRUE) |
grepl("rDNA|16S|18S|fungus|fungi|fungal|metabar|meta-bar|metagen|meta-gen|microb", pubmedFiltered$TI, ignore.case = TRUE), ]
pubmedFiltered <- unique(rbind(importantPapers,extractedArticle,ribosomalDNA))
#filter and process openAlex
openAlex_retting <- openAlex_retting %>%
mutate(
AU = map_chr(authorships, ~ paste(.x$display_name, collapse = "; "))
)
importantPapers <- openAlex_retting[grepl("law|djemiel|grec|akin|fuller|norman|ribeiro|liu m|
orm|brown|sharma|henriksson|fila",
openAlex_retting$AU, ignore.case = TRUE), ]
#extractedArticle <- openAlex_retting[openAlex_retting$title %in% c("Microbiology Of Retting"),]
openAlexFiltered <- openAlex_retting[grepl("retting", openAlex_retting$abstract, ignore.case = TRUE) |
grepl("retting", openAlex_retting$title, ignore.case = TRUE), ]
openAlexFiltered <- openAlexFiltered[grepl("flax|hemp|kenaf|bast", openAlexFiltered$abstract, ignore.case = TRUE) |
grepl("hemp|flax|kenaf|bast", openAlexFiltered$title, ignore.case = TRUE), ]
ribosomalDNA <- openAlexFiltered[grepl("rDNA|16S|18S|fungus|fungi|fungal|metabar|meta-bar|metagen|meta-gen|microb", openAlexFiltered$abstract, ignore.case = TRUE) |
grepl("rDNA|16S|18S|fungus|fungi|fungal|metabar|meta-bar|metagen|meta-gen|microb", openAlexFiltered$title, ignore.case = TRUE), ]
openAlexFiltered <- unique(rbind(importantPapers,ribosomalDNA))
openAlexFiltered <- openAlexFiltered[!(grepl("rett syndrome|autism|síndrome de Rett|bannana", openAlexFiltered$abstract, ignore.case = TRUE) |
grepl("rett syndrome|autism|síndrome de Rett|VASCULAR RESPONSIVENESS|bannana", openAlexFiltered$title, ignore.case = TRUE)), ]
#extract the compatiable feilds
pubmedCompatiable <- pubmedFiltered[,c("TI","AB","PY","SO","DI","AU")]
openAlexCompatiable <- openAlexFiltered[,c("title","abstract","publication_year","source_display_name","doi","AU"),]
#standardize the col names
colnames(pubmedCompatiable) <- c("title","abstract","publication_year","source_display_name","doi","AU")
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[order(aggergatedDocs$publication_year, decreasing = TRUE), ]
z <- oa_fetch(
entity = "works",
full.text = c(
"10.1016/j.scitotenv.2012.09.071"
),
verbose = TRUE
)
query <- paste0(listOfDois[11:20], collapse="[aid] OR ")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
listOfDois[10]
pubsWithDoi[grepl("bannana", pubsWithDoi$abstract),]
pubsWithDoi[grepl("bannana", pubsWithDoi$abstract, ignore.case = TRUE),]
pubsWithDoi[grepl("bannana", pubsWithDoi$title, ignore.case = TRUE),]
pubsWithDoi
pubsWithDoi[grepl("10.1080/15440478.2024.2368143", pubsWithDoi$doi, ignore.case = TRUE),]
query <- paste0(listOfDois[10], collapse="[aid] OR ")
query <- paste0(listOfDois[10], "[aid]")
query
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
listOfDois[10]
query
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]$doi
aggergatedDocs_dataInterest
nchar("https://doi.org/")
substr(aggergatedDocs_dataInterest$doi, 16)
aggergatedDocs_dataInterest$doi
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]$doi
listOfDois <- substr(aggergatedDocs_dataInterest, 16)
aggergatedDocs_dataInterest
listOfDois <- substring(aggergatedDocs_dataInterest, 16)
listOfDois
listOfDois <- substring(aggergatedDocs_dataInterest, 17)
listOfDois
pubsWithDoi <- oa_fetch(
entity = "works",
doi = listOfDois,
verbose = TRUE
)
query <- paste0(listOfDois[1:9], "[aid]")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
query
query <- paste0(listOfDois[1:9], "[aid] OR ")
query
query <- paste0(listOfDois[1:9], collapse="[aid] OR ")
query
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois, collapse="[aid] OR ")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
query <- paste0(listOfDois[10:20], collapse="[aid] OR ")
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[20:50], collapse="[aid] OR ")
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[50:80], collapse="[aid] OR ")
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[50:70],collapse="[aid] OR ")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[50:60],collapse="[aid] OR ")
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[50:55],collapse="[aid] OR ")
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[50:56],collapse="[aid] OR ")
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
listOfDois[56]
View(aggergatedDocs)
query <- paste0(listOfDois[1],"[aid] AND (EBI OR ENA OR NCBI OR EGA OR genbank)[Text Word])
query <- paste0(listOfDois[1],"[aid] AND (EBI OR ENA OR NCBI OR EGA OR genbank)[Text Word]")
query
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
length(listOfDois)
for (rec in 1:length(listOfDois)){
query <- paste0(listOfDois[rec],"[aid] AND (EBI OR ENA OR NCBI OR EGA OR genbank)[Text Word]")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
}
5%2
5%%3
6%%3
for (rec in 1:length(listOfDois)){
if (rec%%3 == 0){
Sys.sleep(2)
}
else{
query <- paste0(listOfDois[rec],"[aid] AND (EBI OR ENA OR NCBI OR EGA OR genbank)[Text Word]")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
paste0("Record: ", rec, "\nCount: ", resSpec$total_count)
}
}
RES <- ""
for (rec in 1:length(listOfDois)){
if (rec%%3 == 0){
Sys.sleep(1)
}
else{
query <- paste0(listOfDois[rec],"[aid] AND (EBI OR ENA OR NCBI OR EGA OR genbank)[Text Word]")
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
RES <- paste0(RES, "\nRecord: ", rec, "\nCount: ", resSpec$total_count)
}
}
RES
print(RES)
paste(RES)
query <- paste0(listOfDois[1],"[aid] AND (EBI OR data OR ENA OR NCBI OR EGA OR genbank)[Text Word]")
listOfDois[56]
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
resSpec$total_count
query <- paste0(listOfDois[1:10],"[aid] AND (EBI OR data OR ENA OR NCBI OR EGA OR genbank)[Text Word]")
listOfDois[56]
# test the queries
resSpec <- pmQueryTotalCount(query = query, api_key = api_key)
query <- paste0(listOfDois[1:10], collapse="[aid] AND (EBI OR data OR ENA OR NCBI OR EGA OR genbank)[Text Word] ")
query
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
aggergatedDocs_dataNoInterest <- aggergatedDocs[!(grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataInterest)){
title <- aggergatedDocs[rec,"title"]
ab <- aggergatedDocs[rec,"abstract"]
py <- aggergatedDocs[rec,"publication_year"]
doi <- aggergatedDocs[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("relevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataNoInterest)){
title <- aggergatedDocs[rec,"title"]
ab <- aggergatedDocs[rec,"abstract"]
py <- aggergatedDocs[rec,"publication_year"]
doi <- aggergatedDocs[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("notRelevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
load("queryResults/pubmed_rettingRes.Rda")
#save results
save(pubmedRetting, file="queryResults/pubmed_rettingRes.Rda")
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataInterest)){
title <- aggergatedDocs_dataInterest[rec,"title"]
ab <- aggergatedDocs_dataInterest[rec,"abstract"]
py <- aggergatedDocs_dataInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/relevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataNoInterest)){
title <- aggergatedDocs_dataNoInterest[rec,"title"]
ab <- aggergatedDocs_dataNoInterest[rec,"abstract"]
py <- aggergatedDocs_dataNoInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataNoInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/notRelevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
#extract the compatiable feilds
pubmedCompatiable <- pubmedFiltered[,c("TI","AB","PY","SO","DI","AU")]
openAlexCompatiable <- openAlexFiltered[,c("title","abstract","publication_year","source_display_name","doi","AU"),]
#standardize the col names
colnames(pubmedCompatiable) <- c("title","abstract","publication_year","source_display_name","doi","AU")
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[order(aggergatedDocs$publication_year, decreasing = TRUE), ]
#seperate into intrest and non interest
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
aggergatedDocs_dataNoInterest <- aggergatedDocs[!(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataInterest)){
title <- aggergatedDocs_dataInterest[rec,"title"]
ab <- aggergatedDocs_dataInterest[rec,"abstract"]
py <- aggergatedDocs_dataInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/relevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataNoInterest)){
title <- aggergatedDocs_dataNoInterest[rec,"title"]
ab <- aggergatedDocs_dataNoInterest[rec,"abstract"]
py <- aggergatedDocs_dataNoInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataNoInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/notRelevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
#extract the compatiable feilds
pubmedCompatiable <- pubmedFiltered[,c("TI","AB","PY","SO","DI","AU")]
openAlexCompatiable <- openAlexFiltered[,c("title","abstract","publication_year","source_display_name","doi","AU"),]
#standardize the col names
colnames(pubmedCompatiable) <- c("title","abstract","publication_year","source_display_name","doi","AU")
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[order(aggergatedDocs$publication_year, decreasing = TRUE), ]
#seperate into intrest and non interest
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
aggergatedDocs_dataNoInterest <- aggergatedDocs[!(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataInterest)){
title <- aggergatedDocs_dataInterest[rec,"title"]
ab <- aggergatedDocs_dataInterest[rec,"abstract"]
py <- aggergatedDocs_dataInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/relevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataNoInterest)){
title <- aggergatedDocs_dataNoInterest[rec,"title"]
ab <- aggergatedDocs_dataNoInterest[rec,"abstract"]
py <- aggergatedDocs_dataNoInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataNoInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/notRelevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
is.duplicated(aggergatedDocs$doi)
duplicated(aggergatedDocs$doi)
duplicateDocs <- aggergatedDocs[(duplicated(aggergatedDocs$doi)),]
View(duplicateDocs)
duplicateDocs <- aggergatedDocs[(duplicated(aggergatedDocs$doi) && !is.na(aggergatedDocs$doi)),]
duplicateDocs <- aggergatedDocs[(duplicated(aggergatedDocs$doi) && !(is.na(aggergatedDocs$doi))),]
duplicateDocs <- aggergatedDocs[(duplicated(aggergatedDocs$doi) & !(is.na(aggergatedDocs$doi))),]
View(duplicateDocs)
zz <- aggergatedDocs[aggergatedDocs$doi %in% duplicateDocs$doi,]
View(zz)
aggergatedDocs <- aggergatedDocs[!(duplicated(aggergatedDocs$doi)),]
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[(!(duplicated(aggergatedDocs$doi))),]
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[(!(duplicated(aggergatedDocs$doi) | is.na(aggergatedDocs$doi))),]
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[!(duplicated(aggergatedDocs$doi) |
is.na(aggergatedDocs$doi)),]
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[!(duplicated(aggergatedDocs$doi)) |
is.na(aggergatedDocs$doi) |
aggergatedDocs$doi == "https://doi.org/NA",]
View(aggergatedDocs)
#extract the compatiable feilds
pubmedCompatiable <- pubmedFiltered[,c("TI","AB","PY","SO","DI","AU")]
openAlexCompatiable <- openAlexFiltered[,c("title","abstract","publication_year","source_display_name","doi","AU"),]
#standardize the col names
colnames(pubmedCompatiable) <- c("title","abstract","publication_year","source_display_name","doi","AU")
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[!(duplicated(aggergatedDocs$doi)) |
is.na(aggergatedDocs$doi) |
aggergatedDocs$doi == "https://doi.org/NA",]
aggergatedDocs <- aggergatedDocs[order(aggergatedDocs$publication_year, decreasing = TRUE), ]
#seperate into intrest and non interest
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
aggergatedDocs_dataNoInterest <- aggergatedDocs[!(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataInterest)){
title <- aggergatedDocs_dataInterest[rec,"title"]
ab <- aggergatedDocs_dataInterest[rec,"abstract"]
py <- aggergatedDocs_dataInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/relevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataNoInterest)){
title <- aggergatedDocs_dataNoInterest[rec,"title"]
ab <- aggergatedDocs_dataNoInterest[rec,"abstract"]
py <- aggergatedDocs_dataNoInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataNoInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/notRelevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
grepl("life|\spigs"," pigs are cool")
grepl("life|\\spigs"," pigs are cool")
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[!(duplicated(str_to_upper(aggergatedDocs$doi))) |
is.na(aggergatedDocs$doi) |
aggergatedDocs$doi == "https://doi.org/NA",]
#extract the compatiable feilds
pubmedCompatiable <- pubmedFiltered[,c("TI","AB","PY","SO","DI","AU")]
openAlexCompatiable <- openAlexFiltered[,c("title","abstract","publication_year","source_display_name","doi","AU"),]
#standardize the col names
colnames(pubmedCompatiable) <- c("title","abstract","publication_year","source_display_name","doi","AU")
#combine doc data ans sort by year
aggergatedDocs <- rbind(pubmedCompatiable,openAlexCompatiable)
aggergatedDocs <- aggergatedDocs[!(duplicated(str_to_upper(aggergatedDocs$doi))) |
is.na(aggergatedDocs$doi) |
aggergatedDocs$doi == "https://doi.org/NA",]
aggergatedDocs <- aggergatedDocs[order(aggergatedDocs$publication_year, decreasing = TRUE), ]
#seperate into intrest and non interest
aggergatedDocs_dataInterest <- aggergatedDocs[(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
aggergatedDocs_dataNoInterest <- aggergatedDocs[!(grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$abstract, ignore.case = TRUE) |
grepl("microb|16S|18S|fungus|fungi|fungal|community|meta", aggergatedDocs$title, ignore.case = TRUE)), ]
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataInterest)){
title <- aggergatedDocs_dataInterest[rec,"title"]
ab <- aggergatedDocs_dataInterest[rec,"abstract"]
py <- aggergatedDocs_dataInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/relevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
# for each record, write the title, DOI, date, and abstract to html
htmlText <- ""
for (rec in 1:nrow(aggergatedDocs_dataNoInterest)){
title <- aggergatedDocs_dataNoInterest[rec,"title"]
ab <- aggergatedDocs_dataNoInterest[rec,"abstract"]
py <- aggergatedDocs_dataNoInterest[rec,"publication_year"]
doi <- aggergatedDocs_dataNoInterest[rec,"doi"]
htmlText <- paste0(htmlText,"<h3>",title,": DOI- ",doi,"  Year: ",py,"</h3>","<p>",ab,"</p>")
}
htmlTemplate <- read_lines("htmlTemplate.txt")
# replace the text in the template
htmlToWrite <- gsub("Insert List of Info", htmlText, htmlTemplate)
#write to html file in wd
htmlOutputFile<-file("compiledAbstracts/notRelevantAbstracts.html")
writeLines(htmlToWrite, htmlOutputFile)
close(htmlOutputFile)
View(openAlex_retting)
View(aggergatedDocs)
View(openAlexFiltered)
View(openAlexFiltered[[4]][[166]])
View(openAlexFiltered[[4]][[166]])
View(openAlexFiltered[[4]][[115]])
View(openAlexFiltered[[4]][[99]])
knitr::opts_chunk$set(echo = TRUE)
library(bibliometrix)
install.packages("bibliometrix")
knitr::opts_chunk$set(echo = TRUE)
library(bibliometrix)
install.packages("bibliometrix")
knitr::opts_chunk$set(echo = TRUE)
library(bibliometrix)
